// <auto-generated />
using System;
using Memes.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Memes.Infrastructure.Migrations
{
    [DbContext(typeof(MemesDbContext))]
    partial class MemesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Memes.Infrastructure.Persistence.Meme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FirstSeenUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastSeenUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Permalink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RedditId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("RedditId")
                        .IsUnique();

                    b.ToTable("memes", (string)null);
                });

            modelBuilder.Entity("Memes.Infrastructure.Persistence.MemeSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MemeId")
                        .HasColumnType("integer");

                    b.Property<int>("NumComments")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SnapshotAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemeId", "SnapshotAt");

                    b.ToTable("meme_snapshots", (string)null);
                });

            modelBuilder.Entity("Memes.Infrastructure.Persistence.MemeSnapshot", b =>
                {
                    b.HasOne("Memes.Infrastructure.Persistence.Meme", "Meme")
                        .WithMany("Snapshots")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meme");
                });

            modelBuilder.Entity("Memes.Infrastructure.Persistence.Meme", b =>
                {
                    b.Navigation("Snapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
